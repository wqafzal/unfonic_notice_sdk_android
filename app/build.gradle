plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-android-extensions'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.unifonic.noticesdk"
        minSdkVersion 19
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        multiDexEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }


    buildTypes {
        debug{

        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    flavorDimensions "backend"

    productFlavors {

        Production {

            dimension "backend"
            def domainName = "staging.notice.api.dev.unifonic.com/devices/api"
            def apiVersion = "v1"

            buildConfigField "boolean", "enabledLogging", "false"
            buildConfigField "boolean", "useCachedData", "false"
            buildConfigField "String", "BASE_URL", "\"https://${domainName}/${apiVersion}/\""
            versionCode = project.getVersionCode()
            versionName = getFormattedDate()
        }

        Staging {
            dimension "backend"
            def domainName = "staging.notice.api.dev.unifonic.com/devices/api"
            def apiVersion = "v1"

            applicationIdSuffix ".staging"

            buildConfigField "boolean", "enabledLogging", "true"
            buildConfigField "boolean", "useCachedData", "false"
            buildConfigField "String", "BASE_URL", "\"https://${domainName}/${apiVersion}/\""
            versionCode = project.getVersionCode()
            versionName = getFormattedDate()
        }

        Development {
            dimension "backend"
            def domainName = "staging.notice.api.dev.unifonic.com/devices/api"
            def apiVersion = "v1"

            applicationIdSuffix ".dev"

            buildConfigField "boolean", "enabledLogging", "true"
            buildConfigField "boolean", "useCachedData", "false"
            buildConfigField "String", "BASE_URL", "\"https://${domainName}/${apiVersion}/\""
            buildConfigField "String", "appCenterAppSecret", "\"75cebf28-3ac4-4ad0-ac04-80b76c16b888\""
            versionCode = project.getVersionCode()
            versionName = getFormattedDate()
        }

    }

}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    implementation 'com.google.android.material:material:1.3.0'

    def multidex_version = "2.0.1"
    implementation "androidx.multidex:multidex:$multidex_version"

    //viewmodel kx
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.0'

    // retrofit

    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.2.0'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'

    //dagger
    implementation 'com.google.dagger:dagger:2.29.1'
    kapt 'com.google.dagger:dagger-compiler:2.29.1'

    //glide
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    kapt 'com.github.bumptech.glide:compiler:4.11.0'

    // Import the BoM for the Firebase platform
    implementation platform('com.google.firebase:firebase-bom:26.1.0')
    // Declare the dependencies for the Crashlytics and Analytics libraries
    // When using the BoM, you don't specify versions in Firebase library dependencies
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-config'
    implementation 'com.google.firebase:firebase-messaging'
    implementation 'com.google.firebase:firebase-dynamic-links-ktx'
}

apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

static def getFormattedDate() {
    def date = new Date()
    def formatted = date.format('yy.MM.dd')
    return formatted
}